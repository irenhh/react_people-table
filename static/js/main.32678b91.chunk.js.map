{"version":3,"sources":["Person.js","PeopleTable.js","NewPerson.js","App.js","index.js"],"names":["classNames","require","Person","props","_classNames","person","markRow","tableRowClass","person--female","sex","person--male","person--mother","children","length","person--father","Object","defineProperty","concat","century","marked","personNameCellStyles","textDecoration","born","fontWeight","died","react_default","a","createElement","className","style","background","onClick","id","name","father","mother","age","join","PeopleTable","people","sortBy","map","item","key","src_Person","NewPerson","state","currentName","currentBirthYear","currentDeathYear","touched","addCurrentInput","event","_this","setState","target","value","handleBlur","field","prevState","objectSpread","validateInput","input","test","replace","_this2","this","_this$props","submitNewPerson","closeNewPersonPopup","addParent","getParentList","array","gender","toConsumableArray","filter","mothers","fathers","type","onSubmit","placeholder","required","onChange","onBlur","selected","disabled","hidden","React","Component","App","peopleList","peopleListToShow","shownPopup","parents","componentDidMount","fetch","then","response","json","result","index","Math","ceil","parent","child","dataToFind","updatedList","toLowerCase","search","sortedArray","sort","b","localeCompare","preventDefault","data","FormData","newPerson","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","get","String","err","return","showNewPersonPopup","src_NewPerson","addName","handleOptionChange","addBirthYear","addDeathYear","src_PeopleTable","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.32678b91.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classNames = require('classnames');\n\nfunction Person(props) {\n  const { person, markRow } = props;\n\n  const tableRowClass = classNames({\n    person,\n    'person--female': person.sex === 'f',\n    'person--male': person.sex === 'm',\n    'person--mother': person.sex === 'f' && person.children.length > 0,\n    'person--father': person.sex === 'm' && person.children.length > 0,\n    [`person--lived-in-${person.century}`]: true,\n    'marked-row': person.marked,\n  });\n\n  const personNameCellStyles = {\n    textDecoration: person.born < 1650 && 'line-through',\n    fontWeight: person.died > 1800 && 'bold',\n  };\n\n  return (\n    <tr\n      className={tableRowClass}\n      style={{ background: person.sex === 'f' && 'lightpink' }}\n      onClick={() => markRow(person.id)}\n    >\n      <td>{person.id}</td>\n\n      <td style={personNameCellStyles}>\n        {person.name}\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{person.father}</td>\n      <td>{person.mother}</td>\n      <td>{person.age}</td>\n      <td>{person.century}</td>\n      <td>{person.children.join(', ')}</td>\n    </tr>\n  );\n}\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    name: PropTypes.string,\n    sex: PropTypes.string,\n    born: PropTypes.number,\n    died: PropTypes.number,\n    father: PropTypes.string,\n    mother: PropTypes.string,\n    age: PropTypes.number,\n    century: PropTypes.number,\n    children: PropTypes.arrayOf(PropTypes.string),\n    marked: PropTypes.bool,\n    id: PropTypes.number,\n  }).isRequired,\n\n  markRow: PropTypes.func.isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Person from './Person';\n\nfunction PeopleTable(props) {\n  const { people, sortBy, markRow } = props;\n\n  const columnNames = [\n    'id',\n    'name',\n    'sex',\n    'born',\n    'died',\n    'father',\n    'mother',\n    'age',\n    'century',\n    'children',\n  ];\n\n  return (\n    <table className=\"people-table\">\n      <thead>\n        <tr>\n          {columnNames.map(item => (\n            <th key={item} onClick={() => sortBy(item)}>{item}</th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <Person\n            key={person.id}\n            person={person}\n            markRow={markRow}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sortBy: PropTypes.func.isRequired,\n  markRow: PropTypes.func.isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewPerson extends React.Component {\n  state = {\n    currentName: '',\n    currentBirthYear: 0,\n    currentDeathYear: 0,\n    touched: {\n      name: false,\n      died: false,\n    },\n  }\n\n  addCurrentInput = (key, event) => {\n    this.setState({\n      [key]: event.target.value,\n    });\n  }\n\n  handleBlur = (field) => {\n    this.setState((prevState) => {\n      return {\n        touched: { ...prevState.touched, [field]: true },\n      };\n    });\n  }\n\n  validateInput = (input) => {\n    switch (input) {\n      case 'currentName':\n        return /\\d|\\W/.test(this.state.currentName.replace(' ', ''));\n\n      case 'currentDeathYear':\n        return (this.state.currentDeathYear - this.state.currentBirthYear) < 0\n        || (this.state.currentDeathYear - this.state.currentBirthYear) >= 150;\n\n      default: return true;\n    }\n  }\n\n  render() {\n    const {\n      submitNewPerson,\n      people,\n      closeNewPersonPopup,\n      addParent,\n    } = this.props;\n\n    const getParentList = (array, gender) => {\n      return [...array]\n        .filter(person => person.born < this.state.currentBirthYear && person.sex === gender);\n    };\n\n    const mothers = getParentList(people, 'f');\n    const fathers = getParentList(people, 'm');\n\n    return (\n      <div className=\"popup-add-new-person\">\n        <h3 className=\"popup-title\">Adding a new person</h3>\n\n        <button\n          type=\"button\"\n          className=\"popup-close\"\n          onClick={closeNewPersonPopup}\n        >\n          x\n        </button>\n\n        <form onSubmit={submitNewPerson} className=\"popup-form\">\n          <div className={\n            this.validateInput('currentName')\n              ? `error-input--message`\n              : 'hidden-block'\n          }>\n            name should contain only letters and spaces\n          </div>\n\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"type a name\"\n            required\n            className={this.validateInput('currentName') ? 'error-input' : ''}\n            onChange={event => this.addCurrentInput('currentName', event)}\n            onBlur={() => this.handleBlur('name')}\n          />\n\n          <div className=\"gender-radio\">\n            <input\n              type=\"radio\"\n              name=\"sex\"\n              value=\"m\"\n              required\n            />\n\n            <label>male</label>\n\n            <input\n              type=\"radio\"\n              name=\"sex\"\n              value=\"f\"\n              required\n            />\n\n            <label>female</label>\n          </div>\n\n          <input\n            type=\"number\"\n            name=\"born\"\n            placeholder=\"type the year of birth\"\n            required\n            onChange={event => this.addCurrentInput('currentBirthYear', event)}\n          />\n\n          <div className={\n            this.validateInput('currentDeathYear') \n              ? `error-input--message` \n              : 'hidden-block'\n          }>\n            age must me between 0 and 150 years\n          </div>\n\n          <input\n            type=\"number\"\n            name=\"died\"\n            placeholder=\"type the year of death\"\n            required\n            className={\n              this.validateInput('currentDeathYear')\n                ? `error-input--died error-input`\n                : ''\n            }\n            \n            onChange={event => this.addCurrentInput('currentDeathYear', event)}\n            onBlur={() => this.handleBlur('died')}\n          />\n\n          <select required onChange={event => addParent('father', event)}>\n            <option value=\"\" selected disabled hidden>Choose a father</option>\n\n            {fathers.map(father => (\n              <option value={father.name} name=\"father\">{father.name}</option>\n            ))}\n          </select>\n\n          <select required onChange={event => addParent('mother', event)}>\n            <option value=\"\" selected disabled hidden>Choose a mother</option>\n\n            {mothers.map(mother => (\n              <option value={mother.name} name=\"mother\">{mother.name}</option>\n            ))}\n          </select>\n\n          <button type=\"submit\">\n            Add new person\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nNewPerson.propTypes = {\n  submitNewPerson: PropTypes.func.isRequired,\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  closeNewPersonPopup: PropTypes.func.isRequired,\n  addParent: PropTypes.func.isRequired,\n};\n\nexport default NewPerson;\n","import React from 'react';\nimport PeopleTable from './PeopleTable';\nimport './App.css';\nimport NewPerson from './NewPerson';\n\nclass App extends React.Component {\n  state = {\n    peopleList: [],\n    peopleListToShow: [],\n    shownPopup: false,\n    parents: {\n      mother: '',\n      father: '',\n    },\n  }\n\n  componentDidMount = () => {\n    fetch('./api/people.json')\n      .then(response => response.json())\n      .then((result) => {\n        const getChildren = (array, parent) => (\n          array\n            .filter(child => (\n              child.father === parent.name || child.mother === parent.name\n            ))\n            .map(child => child.name)\n        );\n\n        const peopleList = result.map((item, index) => (\n          {\n            ...item,\n            id: index + 1,\n            age: item.died - item.born,\n            century: Math.ceil(item.died / 100),\n            children: getChildren(result, item),\n            marked: false,\n          }\n        ));\n\n        this.setState({\n          peopleList,\n          peopleListToShow: peopleList,\n        });\n      });\n  }\n\n  filter = (event) => {\n    const dataToFind = event.target.value;\n\n    this.setState((prevState) => {\n      let updatedList = prevState.peopleList;\n\n      updatedList = updatedList.filter((item) => {\n        const dataToSort = item.name + item.father + item.mother;\n\n        return dataToSort.toLowerCase().search(\n          dataToFind.toLowerCase()\n        ) !== -1;\n      });\n\n      return { peopleListToShow: updatedList };\n    });\n  }\n\n  sortBy = (target) => {\n    this.setState((prevState) => {\n      let sortedArray;\n\n      switch (target) {\n        case 'name':\n          sortedArray = [...prevState.peopleList]\n            .sort((a, b) => a[target].localeCompare(b[target]));\n\n          break;\n\n        default: sortedArray = [...prevState.peopleList]\n          .sort((a, b) => a[target] - b[target]);\n      }\n\n      return { peopleListToShow: sortedArray };\n    });\n  }\n\n  markRow = (id) => {\n    this.setState((prevState) => {\n      const modifiedList = [...prevState.peopleListToShow]\n        .map(person => ({\n          ...person,\n          marked: false,\n        }))\n        .map((person) => {\n          if (person.id === id) {\n            return {\n              ...person,\n              marked: true,\n            };\n          }\n\n          return person;\n        });\n\n      return {\n        peopleListToShow: modifiedList,\n      };\n    });\n  }\n\n  submitNewPerson = (event) => {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    let newPerson = {};\n\n    for (const key of data.keys()) {\n      newPerson[key] = data.get(String(key));\n    }\n\n    newPerson = {\n      ...newPerson,\n      id: this.state.peopleListToShow.length + 1,\n      children: [],\n      mother: this.state.parents.mother,\n      father: this.state.parents.father,\n    };\n\n    this.setState((prevState) => {\n      return {\n        peopleList: [...prevState.peopleList, newPerson],\n        peopleListToShow: [...prevState.peopleListToShow, newPerson],\n        shownPopup: false,\n      };\n    });\n  }\n\n  showNewPersonPopup = () => {\n    this.setState({ shownPopup: true });\n  }\n\n  closeNewPersonPopup =() => {\n    this.setState({ shownPopup: false });\n  }\n\n  addParent = (parent, event) => {\n    this.setState(prevState => ({\n      parents: {\n        ...prevState.parents,\n        [parent]: event.target.value,\n      },\n    }));\n  }\n\n  render() {\n    const { peopleListToShow } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"app-title\">People table</h1>\n        <div className=\"app-title\">\n          {`(${peopleListToShow.length} people)`}\n        </div>\n\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"filter by name, mother and father\"\n            className=\"app-filtering\"\n            onChange={this.filter}\n          />\n        </form>\n\n        {!this.state.shownPopup && (\n          <button\n            type=\"button\"\n            className=\"adding-new-person\"\n            onClick={this.showNewPersonPopup}\n          >\n            Add a new person\n          </button>\n        )}\n\n        {this.state.shownPopup && (\n          <div className=\"app-popup\">\n            <NewPerson\n              people={this.state.peopleListToShow}\n              submitNewPerson={this.submitNewPerson}\n              addName={this.addName}\n              handleOptionChange={this.handleOptionChange}\n              addBirthYear={this.addBirthYear}\n              addDeathYear={this.addDeathYear}\n              closeNewPersonPopup={this.closeNewPersonPopup}\n              addParent={this.addParent}\n            />\n          </div>\n        )}\n\n        <PeopleTable\n          people={peopleListToShow}\n          sortBy={this.sortBy}\n          markRow={this.markRow}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}